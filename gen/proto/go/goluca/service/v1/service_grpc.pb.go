// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: goluca/service/v1/service.proto

package servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoLucaServiceClient is the client API for GoLucaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoLucaServiceClient interface {
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
}

type goLucaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoLucaServiceClient(cc grpc.ClientConnInterface) GoLucaServiceClient {
	return &goLucaServiceClient{cc}
}

func (c *goLucaServiceClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, "/goluca.service.v1.GoLucaService/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoLucaServiceServer is the server API for GoLucaService service.
// All implementations should embed UnimplementedGoLucaServiceServer
// for forward compatibility
type GoLucaServiceServer interface {
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error)
}

// UnimplementedGoLucaServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGoLucaServiceServer struct {
}

func (UnimplementedGoLucaServiceServer) GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}

// UnsafeGoLucaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoLucaServiceServer will
// result in compilation errors.
type UnsafeGoLucaServiceServer interface {
	mustEmbedUnimplementedGoLucaServiceServer()
}

func RegisterGoLucaServiceServer(s grpc.ServiceRegistrar, srv GoLucaServiceServer) {
	s.RegisterService(&GoLucaService_ServiceDesc, srv)
}

func _GoLucaService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoLucaServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goluca.service.v1.GoLucaService/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoLucaServiceServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoLucaService_ServiceDesc is the grpc.ServiceDesc for GoLucaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoLucaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goluca.service.v1.GoLucaService",
	HandlerType: (*GoLucaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransaction",
			Handler:    _GoLucaService_GetTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goluca/service/v1/service.proto",
}
